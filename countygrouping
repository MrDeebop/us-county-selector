<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>County Grouping Tool</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            gap: 20px;
        }
        .left-panel {
            flex: 1;
        }
        .right-panel {
            width: 350px;
        }
        .panel {
            background: #f5f5f5;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
        }
        .map-container {
            height: 600px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        button {
            background: #3498db;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            margin-right: 8px;
            margin-bottom: 8px;
        }
        button:hover {
            background: #2980b9;
        }
        button.secondary {
            background: #95a5a6;
        }
        button.danger {
            background: #e74c3c;
        }
        input {
            padding: 8px;
            border-radius: 4px;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            width: 100%;
            box-sizing: border-box;
        }
        .group-list {
            margin-top: 15px;
        }
        .group {
            background: white;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .group-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-weight: bold;
        }
        .county-list {
            max-height: 150px;
            overflow-y: auto;
            padding: 5px;
            background: #f9f9f9;
            border-radius: 3px;
        }
        .county-item {
            padding: 3px 0;
            border-bottom: 1px solid #eee;
        }
        .current-selection {
            margin-top: 10px;
            padding: 10px;
            background: #e8f4f8;
            border-radius: 4px;
        }
        .selection-count {
            font-weight: bold;
            margin-bottom: 5px;
        }
        .selection-list {
            max-height: 100px;
            overflow-y: auto;
        }
        .highlighted {
            animation: highlight 1.5s;
        }
        @keyframes highlight {
            0% { background-color: #ffff99; }
            100% { background-color: transparent; }
        }
        .instructions {
            background: #e7f4ff;
            padding: 15px;
            border-left: 4px solid #3498db;
            margin-bottom: 20px;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="left-panel">
            <div class="panel">
                <h2>County Grouping Tool</h2>
                <div class="instructions">
                    <h3>How to create county groups:</h3>
                    <ol>
                        <li>Enter a group name below</li>
                        <li>Click counties on the map to add them to your current selection</li>
                        <li>Use "Add to Group" to save the selection or "Clear Selection" to start over</li>
                        <li>Drag your mouse while holding down the button to select multiple counties</li>
                    </ol>
                </div>
                
                <div>
                    <input type="text" id="group-name" placeholder="Enter group name">
                    <button id="add-group">Create Group</button>
                    <button id="clear-selection" class="secondary">Clear Selection</button>
                    <button id="add-to-group">Add to Group</button>
                </div>
                
                <div class="current-selection">
                    <div class="selection-count">Selected: <span id="selection-count">0</span> counties</div>
                    <div class="selection-list" id="selection-list"></div>
                </div>
            </div>
            
            <div class="map-container" id="map"></div>
        </div>
        
        <div class="right-panel">
            <div class="panel">
                <h3>Your Groups</h3>
                <div id="no-groups" style="display: none;">No groups created yet</div>
                <div class="group-list" id="group-list"></div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
        // Initialize map
        const map = L.map('map').setView([39.8283, -98.5795], 4);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // State variables
        let geoJsonLayer = null;
        let currentGroup = null;
        let currentSelection = [];
        let groups = [];
        let isDraggingSelection = false;
        let dragStartPoint = null;
        let dragRectangle = null;

        // DOM elements
        const groupNameInput = document.getElementById('group-name');
        const addGroupBtn = document.getElementById('add-group');
        const clearSelectionBtn = document.getElementById('clear-selection');
        const addToGroupBtn = document.getElementById('add-to-group');
        const selectionCount = document.getElementById('selection-count');
        const selectionList = document.getElementById('selection-list');
        const groupList = document.getElementById('group-list');
        const noGroupsMsg = document.getElementById('no-groups');

        // Event listeners
        addGroupBtn.addEventListener('click', createNewGroup);
        clearSelectionBtn.addEventListener('click', clearSelection);
        addToGroupBtn.addEventListener('click', addToGroup);

        // Map events for drag selection
        map.on('mousedown', startDragSelection);
        map.on('mousemove', updateDragSelection);
        map.on('mouseup', endDragSelection);
        map.on('mouseout', endDragSelection);

        // Load GeoJSON from parent window (interface with existing tool)
        window.addEventListener('load', () => {
            if (window.parent && window.parent.geoJsonLayer) {
                // Clone the GeoJSON data from the parent
                const geojsonData = JSON.parse(JSON.stringify(window.parent.geoJsonLayer.toGeoJSON()));
                processGeoJSON(geojsonData);
            } else {
                alert('Please load counties in the main viewer first');
            }
        });

        function processGeoJSON(geojsonData) {
            // Style function for the GeoJSON
            function style(feature) {
                const isSelected = currentSelection.includes(feature);
                const isInGroup = groups.some(group => 
                    group.counties.some(county => county.properties.GEOID === feature.properties.GEOID)
                );
                
                return {
                    fillColor: isSelected ? '#e74c3c' : 
                              isInGroup ? '#2ecc71' : '#3388ff',
                    weight: isSelected ? 2 : 1,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7
                };
            }
            
            // Highlight feature on hover
            function highlightFeature(e) {
                const layer = e.target;
                if (isDraggingSelection) return;
                
                layer.setStyle({
                    weight: 3,
                    color: '#666',
                    dashArray: '',
                    fillOpacity: 0.7
                });
                
                layer.bringToFront();
            }
            
            function resetHighlight(e) {
                if (isDraggingSelection) return;
                geoJsonLayer.resetStyle(e.target);
            }
            
            function onEachFeature(feature, layer) {
                // Get county name from properties
                const countyName = feature.properties.NAME || feature.properties.name || 'Unnamed County';
                const stateName = feature.properties.STATE_NAME || feature.properties.state_name || 'Unknown State';
                
                // Bind tooltip
                layer.bindTooltip(`${countyName}, ${stateName}`);
                
                // Add click event
                layer.on({
                    click: function(e) {
                        if (isDraggingSelection) return;
                        toggleCountySelection(feature);
                    },
                    mouseover: highlightFeature,
                    mouseout: resetHighlight
                });
            }
            
            // Create GeoJSON layer
            geoJsonLayer = L.geoJSON(geojsonData, {
                style: style,
                onEachFeature: onEachFeature
            }).addTo(map);
            
            // Fit map to the GeoJSON bounds
            map.fitBounds(geoJsonLayer.getBounds());
        }

        // County selection functions
        function toggleCountySelection(feature) {
            const index = currentSelection.findIndex(f => f.properties.GEOID === feature.properties.GEOID);
            
            if (index === -1) {
                currentSelection.push(feature);
            } else {
                currentSelection.splice(index, 1);
            }
            
            updateSelectionDisplay();
            updateMapStyles();
        }

        function updateSelectionDisplay() {
            selectionCount.textContent = currentSelection.length;
            
            // Update selection list
            selectionList.innerHTML = '';
            currentSelection.forEach(feature => {
                const countyName = feature.properties.NAME || feature.properties.name || 'Unnamed County';
                const stateName = feature.properties.STATE_NAME || feature.properties.state_name || 'Unknown State';
                
                const div = document.createElement('div');
                div.className = 'county-item';
                div.textContent = `${countyName}, ${stateName}`;
                selectionList.appendChild(div);
            });
            
            // Enable/disable add to group button
            addToGroupBtn.disabled = currentSelection.length === 0 || !currentGroup;
        }

        function updateMapStyles() {
            geoJsonLayer.eachLayer(layer => {
                const feature = layer.feature;
                layer.setStyle(style(feature));
            });
        }

        // Group management functions
        function createNewGroup() {
            const groupName = groupNameInput.value.trim();
            if (!groupName) {
                alert('Please enter a group name');
                return;
            }
            
            currentGroup = {
                id: Date.now(),
                name: groupName,
                counties: []
            };
            
            groupNameInput.value = '';
            groupNameInput.focus();
            
            // Add to groups list if it's new
            if (!groups.some(g => g.id === currentGroup.id)) {
                groups.push(currentGroup);
                renderGroups();
            }
            
            noGroupsMsg.style.display = 'none';
            addToGroupBtn.disabled = false;
        }

        function addToGroup() {
            if (!currentGroup || currentSelection.length === 0) return;
            
            // Add only counties not already in the group
            currentSelection.forEach(feature => {
                if (!currentGroup.counties.some(c => c.properties.GEOID === feature.properties.GEOID)) {
                    currentGroup.counties.push(feature);
                }
            });
            
            // Highlight the group in the list
            const groupElement = document.getElementById(`group-${currentGroup.id}`);
            if (groupElement) {
                groupElement.classList.add('highlighted');
                setTimeout(() => groupElement.classList.remove('highlighted'), 1500);
            }
            
            clearSelection();
            renderGroups();
            updateMapStyles();
        }

        function clearSelection() {
            currentSelection = [];
            updateSelectionDisplay();
            updateMapStyles();
        }

        function renderGroups() {
            groupList.innerHTML = '';
            
            groups.forEach(group => {
                const groupDiv = document.createElement('div');
                groupDiv.className = 'group';
                groupDiv.id = `group-${group.id}`;
                
                const header = document.createElement('div');
                header.className = 'group-header';
                header.innerHTML = `
                    <span>${group.name}</span>
                    <span>${group.counties.length} counties</span>
                `;
                
                const countyList = document.createElement('div');
                countyList.className = 'county-list';
                
                group.counties.forEach(feature => {
                    const countyName = feature.properties.NAME || feature.properties.name || 'Unnamed County';
                    const stateName = feature.properties.STATE_NAME || feature.properties.state_name || 'Unknown State';
                    
                    const countyDiv = document.createElement('div');
                    countyDiv.className = 'county-item';
                    countyDiv.textContent = `${countyName}, ${stateName}`;
                    countyList.appendChild(countyDiv);
                });
                
                const buttons = document.createElement('div');
                buttons.style.marginTop = '8px';
                buttons.innerHTML = `
                    <button onclick="setCurrentGroup(${group.id})">Select</button>
                    <button class="danger" onclick="deleteGroup(${group.id})">Delete</button>
                `;
                
                groupDiv.appendChild(header);
                groupDiv.appendChild(countyList);
                groupDiv.appendChild(buttons);
                groupList.appendChild(groupDiv);
            });
            
            noGroupsMsg.style.display = groups.length === 0 ? 'block' : 'none';
        }

        // Drag selection functions
        function startDragSelection(e) {
            if (e.originalEvent.ctrlKey || e.originalEvent.metaKey) {
                isDraggingSelection = true;
                dragStartPoint = e.latlng;
                
                // Create rectangle if it doesn't exist
                if (!dragRectangle) {
                    dragRectangle = L.rectangle([dragStartPoint, dragStartPoint], {
                        color: '#3388ff',
                        weight: 1,
                        fillOpacity: 0.3
                    }).addTo(map);
                }
            }
        }

        function updateDragSelection(e) {
            if (!isDraggingSelection || !dragStartPoint) return;
            
            // Update rectangle bounds
            dragRectangle.setBounds([dragStartPoint, e.latlng]);
            
            // Select features within the bounds
            const bounds = dragRectangle.getBounds();
            const newSelection = [];
            
            geoJsonLayer.eachLayer(layer => {
                if (bounds.contains(layer.getBounds())) {
                    newSelection.push(layer.feature);
                }
            });
            
            currentSelection = [...new Set([...currentSelection, ...newSelection])];
            updateSelectionDisplay();
            updateMapStyles();
        }

        function endDragSelection() {
            if (isDraggingSelection) {
                isDraggingSelection = false;
                dragStartPoint = null;
                
                if (dragRectangle) {
                    map.removeLayer(dragRectangle);
                    dragRectangle = null;
                }
            }
        }

        // Global functions for button actions
        window.setCurrentGroup = function(groupId) {
            currentGroup = groups.find(g => g.id === groupId);
            addToGroupBtn.disabled = false;
        };

        window.deleteGroup = function(groupId) {
            groups = groups.filter(g => g.id !== groupId);
            if (currentGroup && currentGroup.id === groupId) {
                currentGroup = null;
                addToGroupBtn.disabled = true;
            }
            renderGroups();
            updateMapStyles();
        };
    </script>
</body>
</html>
